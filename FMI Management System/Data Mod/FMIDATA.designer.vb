'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="IMSData")>  _
Partial Public Class FMIDATADataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertActivation(instance As Activation)
    End Sub
  Partial Private Sub UpdateActivation(instance As Activation)
    End Sub
  Partial Private Sub DeleteActivation(instance As Activation)
    End Sub
  Partial Private Sub InsertFeeData(instance As FeeData)
    End Sub
  Partial Private Sub UpdateFeeData(instance As FeeData)
    End Sub
  Partial Private Sub DeleteFeeData(instance As FeeData)
    End Sub
  Partial Private Sub InsertFeeStructure(instance As FeeStructure)
    End Sub
  Partial Private Sub UpdateFeeStructure(instance As FeeStructure)
    End Sub
  Partial Private Sub DeleteFeeStructure(instance As FeeStructure)
    End Sub
  Partial Private Sub InsertInstituteInfo(instance As InstituteInfo)
    End Sub
  Partial Private Sub UpdateInstituteInfo(instance As InstituteInfo)
    End Sub
  Partial Private Sub DeleteInstituteInfo(instance As InstituteInfo)
    End Sub
  Partial Private Sub InsertLog(instance As Log)
    End Sub
  Partial Private Sub UpdateLog(instance As Log)
    End Sub
  Partial Private Sub DeleteLog(instance As Log)
    End Sub
  Partial Private Sub InsertSession(instance As Session)
    End Sub
  Partial Private Sub UpdateSession(instance As Session)
    End Sub
  Partial Private Sub DeleteSession(instance As Session)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertTransact(instance As Transact)
    End Sub
  Partial Private Sub UpdateTransact(instance As Transact)
    End Sub
  Partial Private Sub DeleteTransact(instance As Transact)
    End Sub
  Partial Private Sub InsertUSER(instance As USER)
    End Sub
  Partial Private Sub UpdateUSER(instance As USER)
    End Sub
  Partial Private Sub DeleteUSER(instance As USER)
    End Sub
  Partial Private Sub InsertStudent(instance As Student)
    End Sub
  Partial Private Sub UpdateStudent(instance As Student)
    End Sub
  Partial Private Sub DeleteStudent(instance As Student)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Institute_Information_System.My.MySettings.Default.FMIDATAConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Activations() As System.Data.Linq.Table(Of Activation)
		Get
			Return Me.GetTable(Of Activation)
		End Get
	End Property
	
	Public ReadOnly Property FeeDatas() As System.Data.Linq.Table(Of FeeData)
		Get
			Return Me.GetTable(Of FeeData)
		End Get
	End Property
	
	Public ReadOnly Property FeeStructures() As System.Data.Linq.Table(Of FeeStructure)
		Get
			Return Me.GetTable(Of FeeStructure)
		End Get
	End Property
	
	Public ReadOnly Property InstituteInfos() As System.Data.Linq.Table(Of InstituteInfo)
		Get
			Return Me.GetTable(Of InstituteInfo)
		End Get
	End Property
	
	Public ReadOnly Property Logs() As System.Data.Linq.Table(Of Log)
		Get
			Return Me.GetTable(Of Log)
		End Get
	End Property
	
	Public ReadOnly Property Sessions() As System.Data.Linq.Table(Of Session)
		Get
			Return Me.GetTable(Of Session)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property Transacts() As System.Data.Linq.Table(Of Transact)
		Get
			Return Me.GetTable(Of Transact)
		End Get
	End Property
	
	Public ReadOnly Property USERs() As System.Data.Linq.Table(Of USER)
		Get
			Return Me.GetTable(Of USER)
		End Get
	End Property
	
	Public ReadOnly Property Students() As System.Data.Linq.Table(Of Student)
		Get
			Return Me.GetTable(Of Student)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ADDUSER")>  _
	Public Function ADDUSER(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(40)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FullName", DbType:="NVarChar(40)")> ByVal fullName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal password As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(250)")> ByRef responseMessage As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, fullName, password, responseMessage)
		responseMessage = CType(result.GetParameterValue(3),String)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.login")>  _
	Public Function login(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(250)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal password As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(250)")> ByRef responseMessage As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userName, password, responseMessage)
		responseMessage = CType(result.GetParameterValue(2),String)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Activation")>  _
Partial Public Class Activation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _HardwareID As String
	
	Private _SerialNo As String
	
	Private _ActivationID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnHardwareIDChanging(value As String)
    End Sub
    Partial Private Sub OnHardwareIDChanged()
    End Sub
    Partial Private Sub OnSerialNoChanging(value As String)
    End Sub
    Partial Private Sub OnSerialNoChanged()
    End Sub
    Partial Private Sub OnActivationIDChanging(value As String)
    End Sub
    Partial Private Sub OnActivationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HardwareID", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property HardwareID() As String
		Get
			Return Me._HardwareID
		End Get
		Set
			If (String.Equals(Me._HardwareID, value) = false) Then
				Me.OnHardwareIDChanging(value)
				Me.SendPropertyChanging
				Me._HardwareID = value
				Me.SendPropertyChanged("HardwareID")
				Me.OnHardwareIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SerialNo", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property SerialNo() As String
		Get
			Return Me._SerialNo
		End Get
		Set
			If (String.Equals(Me._SerialNo, value) = false) Then
				Me.OnSerialNoChanging(value)
				Me.SendPropertyChanging
				Me._SerialNo = value
				Me.SendPropertyChanged("SerialNo")
				Me.OnSerialNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationID", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property ActivationID() As String
		Get
			Return Me._ActivationID
		End Get
		Set
			If (String.Equals(Me._ActivationID, value) = false) Then
				Me.OnActivationIDChanging(value)
				Me.SendPropertyChanging
				Me._ActivationID = value
				Me.SendPropertyChanged("ActivationID")
				Me.OnActivationIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FeeData")>  _
Partial Public Class FeeData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Total_Fee As Decimal
	
	Private _Due_ As System.Nullable(Of Decimal)
	
	Private _Fee_id As System.Nullable(Of Integer)
	
	Private _Paid As System.Nullable(Of Decimal)
	
	Private _SR_no As String
	
	Private _Date_of_Deposit As String
	
	Private _FeeStructure As EntityRef(Of FeeStructure)
	
	Private _Student As EntityRef(Of Student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTotal_FeeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotal_FeeChanged()
    End Sub
    Partial Private Sub OnDue_Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDue_Changed()
    End Sub
    Partial Private Sub OnFee_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFee_idChanged()
    End Sub
    Partial Private Sub OnPaidChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPaidChanged()
    End Sub
    Partial Private Sub OnSR_noChanging(value As String)
    End Sub
    Partial Private Sub OnSR_noChanged()
    End Sub
    Partial Private Sub OnDate_of_DepositChanging(value As String)
    End Sub
    Partial Private Sub OnDate_of_DepositChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FeeStructure = CType(Nothing, EntityRef(Of FeeStructure))
		Me._Student = CType(Nothing, EntityRef(Of Student))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Fee]", Storage:="_Total_Fee", DbType:="Money NOT NULL")>  _
	Public Property Total_Fee() As Decimal
		Get
			Return Me._Total_Fee
		End Get
		Set
			If ((Me._Total_Fee = value)  _
						= false) Then
				Me.OnTotal_FeeChanging(value)
				Me.SendPropertyChanging
				Me._Total_Fee = value
				Me.SendPropertyChanged("Total_Fee")
				Me.OnTotal_FeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Due ]", Storage:="_Due_", DbType:="Money")>  _
	Public Property Due_() As System.Nullable(Of Decimal)
		Get
			Return Me._Due_
		End Get
		Set
			If (Me._Due_.Equals(value) = false) Then
				Me.OnDue_Changing(value)
				Me.SendPropertyChanging
				Me._Due_ = value
				Me.SendPropertyChanged("Due_")
				Me.OnDue_Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fee_id", DbType:="Int")>  _
	Public Property Fee_id() As System.Nullable(Of Integer)
		Get
			Return Me._Fee_id
		End Get
		Set
			If (Me._Fee_id.Equals(value) = false) Then
				If Me._FeeStructure.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFee_idChanging(value)
				Me.SendPropertyChanging
				Me._Fee_id = value
				Me.SendPropertyChanged("Fee_id")
				Me.OnFee_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paid", DbType:="Money")>  _
	Public Property Paid() As System.Nullable(Of Decimal)
		Get
			Return Me._Paid
		End Get
		Set
			If (Me._Paid.Equals(value) = false) Then
				Me.OnPaidChanging(value)
				Me.SendPropertyChanging
				Me._Paid = value
				Me.SendPropertyChanged("Paid")
				Me.OnPaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SR no]", Storage:="_SR_no", DbType:="NVarChar(10)")>  _
	Public Property SR_no() As String
		Get
			Return Me._SR_no
		End Get
		Set
			If (String.Equals(Me._SR_no, value) = false) Then
				Me.OnSR_noChanging(value)
				Me.SendPropertyChanging
				Me._SR_no = value
				Me.SendPropertyChanged("SR_no")
				Me.OnSR_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date of Deposit]", Storage:="_Date_of_Deposit", DbType:="NVarChar(50)")>  _
	Public Property Date_of_Deposit() As String
		Get
			Return Me._Date_of_Deposit
		End Get
		Set
			If (String.Equals(Me._Date_of_Deposit, value) = false) Then
				Me.OnDate_of_DepositChanging(value)
				Me.SendPropertyChanging
				Me._Date_of_Deposit = value
				Me.SendPropertyChanged("Date_of_Deposit")
				Me.OnDate_of_DepositChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FeeStructure_FeeData", Storage:="_FeeStructure", ThisKey:="Fee_id", OtherKey:="Fees_Id", IsForeignKey:=true)>  _
	Public Property FeeStructure() As FeeStructure
		Get
			Return Me._FeeStructure.Entity
		End Get
		Set
			Dim previousValue As FeeStructure = Me._FeeStructure.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FeeStructure.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FeeStructure.Entity = Nothing
					previousValue.FeeDatas.Remove(Me)
				End If
				Me._FeeStructure.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FeeDatas.Add(Me)
					Me._Fee_id = value.Fees_Id
				Else
					Me._Fee_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FeeStructure")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_FeeData", Storage:="_Student", ThisKey:="SR_no", OtherKey:="SR_no", IsForeignKey:=true)>  _
	Public Property Student() As Student
		Get
			Return Me._Student.Entity
		End Get
		Set
			Dim previousValue As Student = Me._Student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Student.Entity = Nothing
					previousValue.FeeDatas.Remove(Me)
				End If
				Me._Student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FeeDatas.Add(Me)
					Me._SR_no = value.SR_no
				Else
					Me._SR_no = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Student")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FeeStructure")>  _
Partial Public Class FeeStructure
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Fees_Id As Integer
	
	Private _Class As String
	
	Private _Fee As System.Nullable(Of Decimal)
	
	Private _Admision_Fee As System.Nullable(Of Decimal)
	
	Private _Total_Fee As System.Nullable(Of Decimal)
	
	Private _FeeDatas As EntitySet(Of FeeData)
	
	Private _Transacts As EntitySet(Of Transact)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFees_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFees_IdChanged()
    End Sub
    Partial Private Sub OnClassChanging(value As String)
    End Sub
    Partial Private Sub OnClassChanged()
    End Sub
    Partial Private Sub OnFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFeeChanged()
    End Sub
    Partial Private Sub OnAdmision_FeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAdmision_FeeChanged()
    End Sub
    Partial Private Sub OnTotal_FeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotal_FeeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FeeDatas = New EntitySet(Of FeeData)(AddressOf Me.attach_FeeDatas, AddressOf Me.detach_FeeDatas)
		Me._Transacts = New EntitySet(Of Transact)(AddressOf Me.attach_Transacts, AddressOf Me.detach_Transacts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fees_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Fees_Id() As Integer
		Get
			Return Me._Fees_Id
		End Get
		Set
			If ((Me._Fees_Id = value)  _
						= false) Then
				Me.OnFees_IdChanging(value)
				Me.SendPropertyChanging
				Me._Fees_Id = value
				Me.SendPropertyChanged("Fees_Id")
				Me.OnFees_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Class", Storage:="_Class", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property [Class]() As String
		Get
			Return Me._Class
		End Get
		Set
			If (String.Equals(Me._Class, value) = false) Then
				Me.OnClassChanging(value)
				Me.SendPropertyChanging
				Me._Class = value
				Me.SendPropertyChanged("[Class]")
				Me.OnClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fee", DbType:="Money")>  _
	Public Property Fee() As System.Nullable(Of Decimal)
		Get
			Return Me._Fee
		End Get
		Set
			If (Me._Fee.Equals(value) = false) Then
				Me.OnFeeChanging(value)
				Me.SendPropertyChanging
				Me._Fee = value
				Me.SendPropertyChanged("Fee")
				Me.OnFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Admision Fee]", Storage:="_Admision_Fee", DbType:="Money")>  _
	Public Property Admision_Fee() As System.Nullable(Of Decimal)
		Get
			Return Me._Admision_Fee
		End Get
		Set
			If (Me._Admision_Fee.Equals(value) = false) Then
				Me.OnAdmision_FeeChanging(value)
				Me.SendPropertyChanging
				Me._Admision_Fee = value
				Me.SendPropertyChanged("Admision_Fee")
				Me.OnAdmision_FeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Fee]", Storage:="_Total_Fee", DbType:="Money")>  _
	Public Property Total_Fee() As System.Nullable(Of Decimal)
		Get
			Return Me._Total_Fee
		End Get
		Set
			If (Me._Total_Fee.Equals(value) = false) Then
				Me.OnTotal_FeeChanging(value)
				Me.SendPropertyChanging
				Me._Total_Fee = value
				Me.SendPropertyChanged("Total_Fee")
				Me.OnTotal_FeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FeeStructure_FeeData", Storage:="_FeeDatas", ThisKey:="Fees_Id", OtherKey:="Fee_id")>  _
	Public Property FeeDatas() As EntitySet(Of FeeData)
		Get
			Return Me._FeeDatas
		End Get
		Set
			Me._FeeDatas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FeeStructure_Transact", Storage:="_Transacts", ThisKey:="Fees_Id", OtherKey:="Fee_id")>  _
	Public Property Transacts() As EntitySet(Of Transact)
		Get
			Return Me._Transacts
		End Get
		Set
			Me._Transacts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FeeDatas(ByVal entity As FeeData)
		Me.SendPropertyChanging
		entity.FeeStructure = Me
	End Sub
	
	Private Sub detach_FeeDatas(ByVal entity As FeeData)
		Me.SendPropertyChanging
		entity.FeeStructure = Nothing
	End Sub
	
	Private Sub attach_Transacts(ByVal entity As Transact)
		Me.SendPropertyChanging
		entity.FeeStructure = Me
	End Sub
	
	Private Sub detach_Transacts(ByVal entity As Transact)
		Me.SendPropertyChanging
		entity.FeeStructure = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InstituteInfo")>  _
Partial Public Class InstituteInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Institute_Name As String
	
	Private _Principal_Name As String
	
	Private _Director_Name As String
	
	Private _Address As String
	
	Private _Phone_Number As String
	
	Private _Email As String
	
	Private _Logo As System.Data.Linq.Binary
	
	Private _Reg_No As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnInstitute_NameChanging(value As String)
    End Sub
    Partial Private Sub OnInstitute_NameChanged()
    End Sub
    Partial Private Sub OnPrincipal_NameChanging(value As String)
    End Sub
    Partial Private Sub OnPrincipal_NameChanged()
    End Sub
    Partial Private Sub OnDirector_NameChanging(value As String)
    End Sub
    Partial Private Sub OnDirector_NameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnPhone_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhone_NumberChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnLogoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLogoChanged()
    End Sub
    Partial Private Sub OnReg_NoChanging(value As String)
    End Sub
    Partial Private Sub OnReg_NoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Institute Name]", Storage:="_Institute_Name", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Institute_Name() As String
		Get
			Return Me._Institute_Name
		End Get
		Set
			If (String.Equals(Me._Institute_Name, value) = false) Then
				Me.OnInstitute_NameChanging(value)
				Me.SendPropertyChanging
				Me._Institute_Name = value
				Me.SendPropertyChanged("Institute_Name")
				Me.OnInstitute_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Principal Name]", Storage:="_Principal_Name", DbType:="NVarChar(50)")>  _
	Public Property Principal_Name() As String
		Get
			Return Me._Principal_Name
		End Get
		Set
			If (String.Equals(Me._Principal_Name, value) = false) Then
				Me.OnPrincipal_NameChanging(value)
				Me.SendPropertyChanging
				Me._Principal_Name = value
				Me.SendPropertyChanged("Principal_Name")
				Me.OnPrincipal_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Director Name]", Storage:="_Director_Name", DbType:="NVarChar(50)")>  _
	Public Property Director_Name() As String
		Get
			Return Me._Director_Name
		End Get
		Set
			If (String.Equals(Me._Director_Name, value) = false) Then
				Me.OnDirector_NameChanging(value)
				Me.SendPropertyChanging
				Me._Director_Name = value
				Me.SendPropertyChanged("Director_Name")
				Me.OnDirector_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Phone Number]", Storage:="_Phone_Number", DbType:="NVarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone_Number() As String
		Get
			Return Me._Phone_Number
		End Get
		Set
			If (String.Equals(Me._Phone_Number, value) = false) Then
				Me.OnPhone_NumberChanging(value)
				Me.SendPropertyChanging
				Me._Phone_Number = value
				Me.SendPropertyChanged("Phone_Number")
				Me.OnPhone_NumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Logo", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Logo() As System.Data.Linq.Binary
		Get
			Return Me._Logo
		End Get
		Set
			If (Object.Equals(Me._Logo, value) = false) Then
				Me.OnLogoChanging(value)
				Me.SendPropertyChanging
				Me._Logo = value
				Me.SendPropertyChanged("Logo")
				Me.OnLogoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Reg No]", Storage:="_Reg_No", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Reg_No() As String
		Get
			Return Me._Reg_No
		End Get
		Set
			If (String.Equals(Me._Reg_No, value) = false) Then
				Me.OnReg_NoChanging(value)
				Me.SendPropertyChanging
				Me._Reg_No = value
				Me.SendPropertyChanged("Reg_No")
				Me.OnReg_NoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Logs")>  _
Partial Public Class Log
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _UserID As String
	
	Private _Date As String
	
	Private _Operation As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As String)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnOperationChanging(value As String)
    End Sub
    Partial Private Sub OnOperationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="NVarChar(50)")>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="NVarChar(50)")>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Operation", DbType:="NVarChar(MAX)")>  _
	Public Property Operation() As String
		Get
			Return Me._Operation
		End Get
		Set
			If (String.Equals(Me._Operation, value) = false) Then
				Me.OnOperationChanging(value)
				Me.SendPropertyChanging
				Me._Operation = value
				Me.SendPropertyChanged("Operation")
				Me.OnOperationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sessions")>  _
Partial Public Class Session
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Session As String
	
	Private _Students As EntitySet(Of Student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSessionChanging(value As String)
    End Sub
    Partial Private Sub OnSessionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Students = New EntitySet(Of Student)(AddressOf Me.attach_Students, AddressOf Me.detach_Students)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Session", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Session() As String
		Get
			Return Me._Session
		End Get
		Set
			If (String.Equals(Me._Session, value) = false) Then
				Me.OnSessionChanging(value)
				Me.SendPropertyChanging
				Me._Session = value
				Me.SendPropertyChanged("Session")
				Me.OnSessionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Session_Student", Storage:="_Students", ThisKey:="Session", OtherKey:="Session")>  _
	Public Property Students() As EntitySet(Of Student)
		Get
			Return Me._Students
		End Get
		Set
			Me._Students.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Students(ByVal entity As Student)
		Me.SendPropertyChanging
		entity.Session1 = Me
	End Sub
	
	Private Sub detach_Students(ByVal entity As Student)
		Me.SendPropertyChanging
		entity.Session1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Staff_Id As Integer
	
	Private _Name As String
	
	Private _Father_s_Name As String
	
	Private _Join_Date As String
	
	Private _Salary As Decimal
	
	Private _Leave_date As String
	
	Private _Designation As String
	
	Private _Extra_Notes As String
	
	Private _Mobile As String
	
	Private _Pic As System.Data.Linq.Binary
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaff_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaff_IdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnFather_s_NameChanging(value As String)
    End Sub
    Partial Private Sub OnFather_s_NameChanged()
    End Sub
    Partial Private Sub OnJoin_DateChanging(value As String)
    End Sub
    Partial Private Sub OnJoin_DateChanged()
    End Sub
    Partial Private Sub OnSalaryChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSalaryChanged()
    End Sub
    Partial Private Sub OnLeave_dateChanging(value As String)
    End Sub
    Partial Private Sub OnLeave_dateChanged()
    End Sub
    Partial Private Sub OnDesignationChanging(value As String)
    End Sub
    Partial Private Sub OnDesignationChanged()
    End Sub
    Partial Private Sub OnExtra_NotesChanging(value As String)
    End Sub
    Partial Private Sub OnExtra_NotesChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnPicChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPicChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staff_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Staff_Id() As Integer
		Get
			Return Me._Staff_Id
		End Get
		Set
			If ((Me._Staff_Id = value)  _
						= false) Then
				Me.OnStaff_IdChanging(value)
				Me.SendPropertyChanging
				Me._Staff_Id = value
				Me.SendPropertyChanged("Staff_Id")
				Me.OnStaff_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Father's Name]", Storage:="_Father_s_Name", DbType:="NVarChar(50)")>  _
	Public Property Father_s_Name() As String
		Get
			Return Me._Father_s_Name
		End Get
		Set
			If (String.Equals(Me._Father_s_Name, value) = false) Then
				Me.OnFather_s_NameChanging(value)
				Me.SendPropertyChanging
				Me._Father_s_Name = value
				Me.SendPropertyChanged("Father_s_Name")
				Me.OnFather_s_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Join Date]", Storage:="_Join_Date", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Join_Date() As String
		Get
			Return Me._Join_Date
		End Get
		Set
			If (String.Equals(Me._Join_Date, value) = false) Then
				Me.OnJoin_DateChanging(value)
				Me.SendPropertyChanging
				Me._Join_Date = value
				Me.SendPropertyChanged("Join_Date")
				Me.OnJoin_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salary", DbType:="Money NOT NULL")>  _
	Public Property Salary() As Decimal
		Get
			Return Me._Salary
		End Get
		Set
			If ((Me._Salary = value)  _
						= false) Then
				Me.OnSalaryChanging(value)
				Me.SendPropertyChanging
				Me._Salary = value
				Me.SendPropertyChanged("Salary")
				Me.OnSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Leave date]", Storage:="_Leave_date", DbType:="NVarChar(50)")>  _
	Public Property Leave_date() As String
		Get
			Return Me._Leave_date
		End Get
		Set
			If (String.Equals(Me._Leave_date, value) = false) Then
				Me.OnLeave_dateChanging(value)
				Me.SendPropertyChanging
				Me._Leave_date = value
				Me.SendPropertyChanged("Leave_date")
				Me.OnLeave_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Designation", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Designation() As String
		Get
			Return Me._Designation
		End Get
		Set
			If (String.Equals(Me._Designation, value) = false) Then
				Me.OnDesignationChanging(value)
				Me.SendPropertyChanging
				Me._Designation = value
				Me.SendPropertyChanged("Designation")
				Me.OnDesignationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Extra Notes]", Storage:="_Extra_Notes", DbType:="NVarChar(50)")>  _
	Public Property Extra_Notes() As String
		Get
			Return Me._Extra_Notes
		End Get
		Set
			If (String.Equals(Me._Extra_Notes, value) = false) Then
				Me.OnExtra_NotesChanging(value)
				Me.SendPropertyChanging
				Me._Extra_Notes = value
				Me.SendPropertyChanged("Extra_Notes")
				Me.OnExtra_NotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(12)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pic", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pic() As System.Data.Linq.Binary
		Get
			Return Me._Pic
		End Get
		Set
			If (Object.Equals(Me._Pic, value) = false) Then
				Me.OnPicChanging(value)
				Me.SendPropertyChanging
				Me._Pic = value
				Me.SendPropertyChanged("Pic")
				Me.OnPicChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Transact")>  _
Partial Public Class Transact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _DateOfDeposit As String
	
	Private _Fee_id As System.Nullable(Of Integer)
	
	Private _SR_no As String
	
	Private _AmountPaid As System.Nullable(Of Decimal)
	
	Private _Depositor As String
	
	Private _Month As String
	
	Private _FeeStructure As EntityRef(Of FeeStructure)
	
	Private _Student As EntityRef(Of Student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDateOfDepositChanging(value As String)
    End Sub
    Partial Private Sub OnDateOfDepositChanged()
    End Sub
    Partial Private Sub OnFee_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFee_idChanged()
    End Sub
    Partial Private Sub OnSR_noChanging(value As String)
    End Sub
    Partial Private Sub OnSR_noChanged()
    End Sub
    Partial Private Sub OnAmountPaidChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountPaidChanged()
    End Sub
    Partial Private Sub OnDepositorChanging(value As String)
    End Sub
    Partial Private Sub OnDepositorChanged()
    End Sub
    Partial Private Sub OnMonthChanging(value As String)
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FeeStructure = CType(Nothing, EntityRef(Of FeeStructure))
		Me._Student = CType(Nothing, EntityRef(Of Student))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfDeposit", DbType:="NVarChar(30)")>  _
	Public Property DateOfDeposit() As String
		Get
			Return Me._DateOfDeposit
		End Get
		Set
			If (String.Equals(Me._DateOfDeposit, value) = false) Then
				Me.OnDateOfDepositChanging(value)
				Me.SendPropertyChanging
				Me._DateOfDeposit = value
				Me.SendPropertyChanged("DateOfDeposit")
				Me.OnDateOfDepositChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fee_id", DbType:="Int")>  _
	Public Property Fee_id() As System.Nullable(Of Integer)
		Get
			Return Me._Fee_id
		End Get
		Set
			If (Me._Fee_id.Equals(value) = false) Then
				If Me._FeeStructure.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFee_idChanging(value)
				Me.SendPropertyChanging
				Me._Fee_id = value
				Me.SendPropertyChanged("Fee_id")
				Me.OnFee_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SR no]", Storage:="_SR_no", DbType:="NVarChar(10)")>  _
	Public Property SR_no() As String
		Get
			Return Me._SR_no
		End Get
		Set
			If (String.Equals(Me._SR_no, value) = false) Then
				Me.OnSR_noChanging(value)
				Me.SendPropertyChanging
				Me._SR_no = value
				Me.SendPropertyChanged("SR_no")
				Me.OnSR_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmountPaid", DbType:="Money")>  _
	Public Property AmountPaid() As System.Nullable(Of Decimal)
		Get
			Return Me._AmountPaid
		End Get
		Set
			If (Me._AmountPaid.Equals(value) = false) Then
				Me.OnAmountPaidChanging(value)
				Me.SendPropertyChanging
				Me._AmountPaid = value
				Me.SendPropertyChanged("AmountPaid")
				Me.OnAmountPaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Depositor", DbType:="NVarChar(50)")>  _
	Public Property Depositor() As String
		Get
			Return Me._Depositor
		End Get
		Set
			If (String.Equals(Me._Depositor, value) = false) Then
				Me.OnDepositorChanging(value)
				Me.SendPropertyChanging
				Me._Depositor = value
				Me.SendPropertyChanged("Depositor")
				Me.OnDepositorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="NVarChar(50)")>  _
	Public Property Month() As String
		Get
			Return Me._Month
		End Get
		Set
			If (String.Equals(Me._Month, value) = false) Then
				Me.OnMonthChanging(value)
				Me.SendPropertyChanging
				Me._Month = value
				Me.SendPropertyChanged("Month")
				Me.OnMonthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FeeStructure_Transact", Storage:="_FeeStructure", ThisKey:="Fee_id", OtherKey:="Fees_Id", IsForeignKey:=true)>  _
	Public Property FeeStructure() As FeeStructure
		Get
			Return Me._FeeStructure.Entity
		End Get
		Set
			Dim previousValue As FeeStructure = Me._FeeStructure.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FeeStructure.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FeeStructure.Entity = Nothing
					previousValue.Transacts.Remove(Me)
				End If
				Me._FeeStructure.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transacts.Add(Me)
					Me._Fee_id = value.Fees_Id
				Else
					Me._Fee_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FeeStructure")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Transact", Storage:="_Student", ThisKey:="SR_no", OtherKey:="SR_no", IsForeignKey:=true)>  _
	Public Property Student() As Student
		Get
			Return Me._Student.Entity
		End Get
		Set
			Dim previousValue As Student = Me._Student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Student.Entity = Nothing
					previousValue.Transacts.Remove(Me)
				End If
				Me._Student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transacts.Add(Me)
					Me._SR_no = value.SR_no
				Else
					Me._SR_no = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Student")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.USERS")>  _
Partial Public Class USER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As Integer
	
	Private _Full_Name As String
	
	Private _UserName As String
	
	Private _PasswordHash As System.Data.Linq.Binary
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnFull_NameChanging(value As String)
    End Sub
    Partial Private Sub OnFull_NameChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordHashChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPasswordHashChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserId() As Integer
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Full Name]", Storage:="_Full_Name", DbType:="NVarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property Full_Name() As String
		Get
			Return Me._Full_Name
		End Get
		Set
			If (String.Equals(Me._Full_Name, value) = false) Then
				Me.OnFull_NameChanging(value)
				Me.SendPropertyChanging
				Me._Full_Name = value
				Me.SendPropertyChanged("Full_Name")
				Me.OnFull_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordHash", DbType:="Binary(64) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PasswordHash() As System.Data.Linq.Binary
		Get
			Return Me._PasswordHash
		End Get
		Set
			If (Object.Equals(Me._PasswordHash, value) = false) Then
				Me.OnPasswordHashChanging(value)
				Me.SendPropertyChanging
				Me._PasswordHash = value
				Me.SendPropertyChanged("PasswordHash")
				Me.OnPasswordHashChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Students")>  _
Partial Public Class Student
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Student_Id As Integer
	
	Private _Name As String
	
	Private _FName As String
	
	Private _MName As String
	
	Private _DOB As String
	
	Private _Cast As String
	
	Private _Subcast As String
	
	Private _Religion As String
	
	Private _SR_no As String
	
	Private _SNo As String
	
	Private _Fno As String
	
	Private _MNo As String
	
	Private _PreClass As String
	
	Private _adClass As String
	
	Private _Address As String
	
	Private _Gaddress As String
	
	Private _GNo As String
	
	Private _PreSchool As String
	
	Private _GName As String
	
	Private _profilePic As System.Data.Linq.Binary
	
	Private _Section As String
	
	Private _Session As String
	
	Private _DOA As String
	
	Private _Medium As String
	
	Private _Bplace As String
	
	Private _Gender As String
	
	Private _BGroup As String
	
	Private _HStay As String
	
	Private _Handicap As String
	
	Private _Mproblem As String
	
	Private _Fpay As System.Nullable(Of Decimal)
	
	Private _FDesig As String
	
	Private _MPay As System.Nullable(Of Decimal)
	
	Private _MDesig As String
	
	Private _Board1 As String
	
	Private _RollNo1 As String
	
	Private _Year1 As String
	
	Private _BName1 As String
	
	Private _Grade1 As String
	
	Private _per1 As String
	
	Private _Board2 As String
	
	Private _RollNo2 As String
	
	Private _Year2 As String
	
	Private _Bname2 As String
	
	Private _Grade2 As String
	
	Private _Per2 As String
	
	Private _Sib1 As String
	
	Private _Class1 As String
	
	Private _Sib2 As String
	
	Private _Class2 As String
	
	Private _Sib3 As String
	
	Private _Class3 As String
	
	Private _Sib4 As String
	
	Private _Class4 As String
	
	Private _CurrentClass As String
	
	Private _Status As String
	
	Private _TC_No As String
	
	Private _TC_Reason As String
	
	Private _FeeDatas As EntitySet(Of FeeData)
	
	Private _Transacts As EntitySet(Of Transact)
	
	Private _Session1 As EntityRef(Of Session)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnFNameChanging(value As String)
    End Sub
    Partial Private Sub OnFNameChanged()
    End Sub
    Partial Private Sub OnMNameChanging(value As String)
    End Sub
    Partial Private Sub OnMNameChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As String)
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OnCastChanging(value As String)
    End Sub
    Partial Private Sub OnCastChanged()
    End Sub
    Partial Private Sub OnSubcastChanging(value As String)
    End Sub
    Partial Private Sub OnSubcastChanged()
    End Sub
    Partial Private Sub OnReligionChanging(value As String)
    End Sub
    Partial Private Sub OnReligionChanged()
    End Sub
    Partial Private Sub OnSR_noChanging(value As String)
    End Sub
    Partial Private Sub OnSR_noChanged()
    End Sub
    Partial Private Sub OnSNoChanging(value As String)
    End Sub
    Partial Private Sub OnSNoChanged()
    End Sub
    Partial Private Sub OnFnoChanging(value As String)
    End Sub
    Partial Private Sub OnFnoChanged()
    End Sub
    Partial Private Sub OnMNoChanging(value As String)
    End Sub
    Partial Private Sub OnMNoChanged()
    End Sub
    Partial Private Sub OnPreClassChanging(value As String)
    End Sub
    Partial Private Sub OnPreClassChanged()
    End Sub
    Partial Private Sub OnadClassChanging(value As String)
    End Sub
    Partial Private Sub OnadClassChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnGaddressChanging(value As String)
    End Sub
    Partial Private Sub OnGaddressChanged()
    End Sub
    Partial Private Sub OnGNoChanging(value As String)
    End Sub
    Partial Private Sub OnGNoChanged()
    End Sub
    Partial Private Sub OnPreSchoolChanging(value As String)
    End Sub
    Partial Private Sub OnPreSchoolChanged()
    End Sub
    Partial Private Sub OnGNameChanging(value As String)
    End Sub
    Partial Private Sub OnGNameChanged()
    End Sub
    Partial Private Sub OnprofilePicChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnprofilePicChanged()
    End Sub
    Partial Private Sub OnSectionChanging(value As String)
    End Sub
    Partial Private Sub OnSectionChanged()
    End Sub
    Partial Private Sub OnSessionChanging(value As String)
    End Sub
    Partial Private Sub OnSessionChanged()
    End Sub
    Partial Private Sub OnDOAChanging(value As String)
    End Sub
    Partial Private Sub OnDOAChanged()
    End Sub
    Partial Private Sub OnMediumChanging(value As String)
    End Sub
    Partial Private Sub OnMediumChanged()
    End Sub
    Partial Private Sub OnBplaceChanging(value As String)
    End Sub
    Partial Private Sub OnBplaceChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnBGroupChanging(value As String)
    End Sub
    Partial Private Sub OnBGroupChanged()
    End Sub
    Partial Private Sub OnHStayChanging(value As String)
    End Sub
    Partial Private Sub OnHStayChanged()
    End Sub
    Partial Private Sub OnHandicapChanging(value As String)
    End Sub
    Partial Private Sub OnHandicapChanged()
    End Sub
    Partial Private Sub OnMproblemChanging(value As String)
    End Sub
    Partial Private Sub OnMproblemChanged()
    End Sub
    Partial Private Sub OnFpayChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFpayChanged()
    End Sub
    Partial Private Sub OnFDesigChanging(value As String)
    End Sub
    Partial Private Sub OnFDesigChanged()
    End Sub
    Partial Private Sub OnMPayChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMPayChanged()
    End Sub
    Partial Private Sub OnMDesigChanging(value As String)
    End Sub
    Partial Private Sub OnMDesigChanged()
    End Sub
    Partial Private Sub OnBoard1Changing(value As String)
    End Sub
    Partial Private Sub OnBoard1Changed()
    End Sub
    Partial Private Sub OnRollNo1Changing(value As String)
    End Sub
    Partial Private Sub OnRollNo1Changed()
    End Sub
    Partial Private Sub OnYear1Changing(value As String)
    End Sub
    Partial Private Sub OnYear1Changed()
    End Sub
    Partial Private Sub OnBName1Changing(value As String)
    End Sub
    Partial Private Sub OnBName1Changed()
    End Sub
    Partial Private Sub OnGrade1Changing(value As String)
    End Sub
    Partial Private Sub OnGrade1Changed()
    End Sub
    Partial Private Sub Onper1Changing(value As String)
    End Sub
    Partial Private Sub Onper1Changed()
    End Sub
    Partial Private Sub OnBoard2Changing(value As String)
    End Sub
    Partial Private Sub OnBoard2Changed()
    End Sub
    Partial Private Sub OnRollNo2Changing(value As String)
    End Sub
    Partial Private Sub OnRollNo2Changed()
    End Sub
    Partial Private Sub OnYear2Changing(value As String)
    End Sub
    Partial Private Sub OnYear2Changed()
    End Sub
    Partial Private Sub OnBname2Changing(value As String)
    End Sub
    Partial Private Sub OnBname2Changed()
    End Sub
    Partial Private Sub OnGrade2Changing(value As String)
    End Sub
    Partial Private Sub OnGrade2Changed()
    End Sub
    Partial Private Sub OnPer2Changing(value As String)
    End Sub
    Partial Private Sub OnPer2Changed()
    End Sub
    Partial Private Sub OnSib1Changing(value As String)
    End Sub
    Partial Private Sub OnSib1Changed()
    End Sub
    Partial Private Sub OnClass1Changing(value As String)
    End Sub
    Partial Private Sub OnClass1Changed()
    End Sub
    Partial Private Sub OnSib2Changing(value As String)
    End Sub
    Partial Private Sub OnSib2Changed()
    End Sub
    Partial Private Sub OnClass2Changing(value As String)
    End Sub
    Partial Private Sub OnClass2Changed()
    End Sub
    Partial Private Sub OnSib3Changing(value As String)
    End Sub
    Partial Private Sub OnSib3Changed()
    End Sub
    Partial Private Sub OnClass3Changing(value As String)
    End Sub
    Partial Private Sub OnClass3Changed()
    End Sub
    Partial Private Sub OnSib4Changing(value As String)
    End Sub
    Partial Private Sub OnSib4Changed()
    End Sub
    Partial Private Sub OnClass4Changing(value As String)
    End Sub
    Partial Private Sub OnClass4Changed()
    End Sub
    Partial Private Sub OnCurrentClassChanging(value As String)
    End Sub
    Partial Private Sub OnCurrentClassChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnTC_NoChanging(value As String)
    End Sub
    Partial Private Sub OnTC_NoChanged()
    End Sub
    Partial Private Sub OnTC_ReasonChanging(value As String)
    End Sub
    Partial Private Sub OnTC_ReasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FeeDatas = New EntitySet(Of FeeData)(AddressOf Me.attach_FeeDatas, AddressOf Me.detach_FeeDatas)
		Me._Transacts = New EntitySet(Of Transact)(AddressOf Me.attach_Transacts, AddressOf Me.detach_Transacts)
		Me._Session1 = CType(Nothing, EntityRef(Of Session))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Student_Id() As Integer
		Get
			Return Me._Student_Id
		End Get
		Set
			If ((Me._Student_Id = value)  _
						= false) Then
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FName() As String
		Get
			Return Me._FName
		End Get
		Set
			If (String.Equals(Me._FName, value) = false) Then
				Me.OnFNameChanging(value)
				Me.SendPropertyChanging
				Me._FName = value
				Me.SendPropertyChanged("FName")
				Me.OnFNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MName() As String
		Get
			Return Me._MName
		End Get
		Set
			If (String.Equals(Me._MName, value) = false) Then
				Me.OnMNameChanging(value)
				Me.SendPropertyChanging
				Me._MName = value
				Me.SendPropertyChanged("MName")
				Me.OnMNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property DOB() As String
		Get
			Return Me._DOB
		End Get
		Set
			If (String.Equals(Me._DOB, value) = false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cast", DbType:="NVarChar(10)")>  _
	Public Property Cast() As String
		Get
			Return Me._Cast
		End Get
		Set
			If (String.Equals(Me._Cast, value) = false) Then
				Me.OnCastChanging(value)
				Me.SendPropertyChanging
				Me._Cast = value
				Me.SendPropertyChanged("Cast")
				Me.OnCastChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subcast", DbType:="NVarChar(10)")>  _
	Public Property Subcast() As String
		Get
			Return Me._Subcast
		End Get
		Set
			If (String.Equals(Me._Subcast, value) = false) Then
				Me.OnSubcastChanging(value)
				Me.SendPropertyChanging
				Me._Subcast = value
				Me.SendPropertyChanged("Subcast")
				Me.OnSubcastChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Religion", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Religion() As String
		Get
			Return Me._Religion
		End Get
		Set
			If (String.Equals(Me._Religion, value) = false) Then
				Me.OnReligionChanging(value)
				Me.SendPropertyChanging
				Me._Religion = value
				Me.SendPropertyChanged("Religion")
				Me.OnReligionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SR no]", Storage:="_SR_no", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SR_no() As String
		Get
			Return Me._SR_no
		End Get
		Set
			If (String.Equals(Me._SR_no, value) = false) Then
				Me.OnSR_noChanging(value)
				Me.SendPropertyChanging
				Me._SR_no = value
				Me.SendPropertyChanged("SR_no")
				Me.OnSR_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SNo", DbType:="NVarChar(12)")>  _
	Public Property SNo() As String
		Get
			Return Me._SNo
		End Get
		Set
			If (String.Equals(Me._SNo, value) = false) Then
				Me.OnSNoChanging(value)
				Me.SendPropertyChanging
				Me._SNo = value
				Me.SendPropertyChanged("SNo")
				Me.OnSNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fno", DbType:="NVarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property Fno() As String
		Get
			Return Me._Fno
		End Get
		Set
			If (String.Equals(Me._Fno, value) = false) Then
				Me.OnFnoChanging(value)
				Me.SendPropertyChanging
				Me._Fno = value
				Me.SendPropertyChanged("Fno")
				Me.OnFnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MNo", DbType:="NVarChar(12)")>  _
	Public Property MNo() As String
		Get
			Return Me._MNo
		End Get
		Set
			If (String.Equals(Me._MNo, value) = false) Then
				Me.OnMNoChanging(value)
				Me.SendPropertyChanging
				Me._MNo = value
				Me.SendPropertyChanged("MNo")
				Me.OnMNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreClass", DbType:="NVarChar(10)")>  _
	Public Property PreClass() As String
		Get
			Return Me._PreClass
		End Get
		Set
			If (String.Equals(Me._PreClass, value) = false) Then
				Me.OnPreClassChanging(value)
				Me.SendPropertyChanging
				Me._PreClass = value
				Me.SendPropertyChanged("PreClass")
				Me.OnPreClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adClass", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property adClass() As String
		Get
			Return Me._adClass
		End Get
		Set
			If (String.Equals(Me._adClass, value) = false) Then
				Me.OnadClassChanging(value)
				Me.SendPropertyChanging
				Me._adClass = value
				Me.SendPropertyChanged("adClass")
				Me.OnadClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gaddress", DbType:="NVarChar(MAX)")>  _
	Public Property Gaddress() As String
		Get
			Return Me._Gaddress
		End Get
		Set
			If (String.Equals(Me._Gaddress, value) = false) Then
				Me.OnGaddressChanging(value)
				Me.SendPropertyChanging
				Me._Gaddress = value
				Me.SendPropertyChanged("Gaddress")
				Me.OnGaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GNo", DbType:="NVarChar(12)")>  _
	Public Property GNo() As String
		Get
			Return Me._GNo
		End Get
		Set
			If (String.Equals(Me._GNo, value) = false) Then
				Me.OnGNoChanging(value)
				Me.SendPropertyChanging
				Me._GNo = value
				Me.SendPropertyChanged("GNo")
				Me.OnGNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreSchool", DbType:="NVarChar(50)")>  _
	Public Property PreSchool() As String
		Get
			Return Me._PreSchool
		End Get
		Set
			If (String.Equals(Me._PreSchool, value) = false) Then
				Me.OnPreSchoolChanging(value)
				Me.SendPropertyChanging
				Me._PreSchool = value
				Me.SendPropertyChanged("PreSchool")
				Me.OnPreSchoolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GName", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property GName() As String
		Get
			Return Me._GName
		End Get
		Set
			If (String.Equals(Me._GName, value) = false) Then
				Me.OnGNameChanging(value)
				Me.SendPropertyChanging
				Me._GName = value
				Me.SendPropertyChanged("GName")
				Me.OnGNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_profilePic", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property profilePic() As System.Data.Linq.Binary
		Get
			Return Me._profilePic
		End Get
		Set
			If (Object.Equals(Me._profilePic, value) = false) Then
				Me.OnprofilePicChanging(value)
				Me.SendPropertyChanging
				Me._profilePic = value
				Me.SendPropertyChanged("profilePic")
				Me.OnprofilePicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Section", DbType:="NVarChar(10)")>  _
	Public Property Section() As String
		Get
			Return Me._Section
		End Get
		Set
			If (String.Equals(Me._Section, value) = false) Then
				Me.OnSectionChanging(value)
				Me.SendPropertyChanging
				Me._Section = value
				Me.SendPropertyChanged("Section")
				Me.OnSectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Session", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Session() As String
		Get
			Return Me._Session
		End Get
		Set
			If (String.Equals(Me._Session, value) = false) Then
				If Me._Session1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSessionChanging(value)
				Me.SendPropertyChanging
				Me._Session = value
				Me.SendPropertyChanged("Session")
				Me.OnSessionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOA", DbType:="NVarChar(30)")>  _
	Public Property DOA() As String
		Get
			Return Me._DOA
		End Get
		Set
			If (String.Equals(Me._DOA, value) = false) Then
				Me.OnDOAChanging(value)
				Me.SendPropertyChanging
				Me._DOA = value
				Me.SendPropertyChanged("DOA")
				Me.OnDOAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Medium", DbType:="NVarChar(10)")>  _
	Public Property Medium() As String
		Get
			Return Me._Medium
		End Get
		Set
			If (String.Equals(Me._Medium, value) = false) Then
				Me.OnMediumChanging(value)
				Me.SendPropertyChanging
				Me._Medium = value
				Me.SendPropertyChanged("Medium")
				Me.OnMediumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bplace", DbType:="NVarChar(10)")>  _
	Public Property Bplace() As String
		Get
			Return Me._Bplace
		End Get
		Set
			If (String.Equals(Me._Bplace, value) = false) Then
				Me.OnBplaceChanging(value)
				Me.SendPropertyChanging
				Me._Bplace = value
				Me.SendPropertyChanged("Bplace")
				Me.OnBplaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BGroup", DbType:="NVarChar(4)")>  _
	Public Property BGroup() As String
		Get
			Return Me._BGroup
		End Get
		Set
			If (String.Equals(Me._BGroup, value) = false) Then
				Me.OnBGroupChanging(value)
				Me.SendPropertyChanging
				Me._BGroup = value
				Me.SendPropertyChanged("BGroup")
				Me.OnBGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HStay", DbType:="NVarChar(4)")>  _
	Public Property HStay() As String
		Get
			Return Me._HStay
		End Get
		Set
			If (String.Equals(Me._HStay, value) = false) Then
				Me.OnHStayChanging(value)
				Me.SendPropertyChanging
				Me._HStay = value
				Me.SendPropertyChanged("HStay")
				Me.OnHStayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Handicap", DbType:="NVarChar(4)")>  _
	Public Property Handicap() As String
		Get
			Return Me._Handicap
		End Get
		Set
			If (String.Equals(Me._Handicap, value) = false) Then
				Me.OnHandicapChanging(value)
				Me.SendPropertyChanging
				Me._Handicap = value
				Me.SendPropertyChanged("Handicap")
				Me.OnHandicapChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mproblem", DbType:="NVarChar(20)")>  _
	Public Property Mproblem() As String
		Get
			Return Me._Mproblem
		End Get
		Set
			If (String.Equals(Me._Mproblem, value) = false) Then
				Me.OnMproblemChanging(value)
				Me.SendPropertyChanging
				Me._Mproblem = value
				Me.SendPropertyChanged("Mproblem")
				Me.OnMproblemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fpay", DbType:="Money")>  _
	Public Property Fpay() As System.Nullable(Of Decimal)
		Get
			Return Me._Fpay
		End Get
		Set
			If (Me._Fpay.Equals(value) = false) Then
				Me.OnFpayChanging(value)
				Me.SendPropertyChanging
				Me._Fpay = value
				Me.SendPropertyChanged("Fpay")
				Me.OnFpayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FDesig", DbType:="NVarChar(10)")>  _
	Public Property FDesig() As String
		Get
			Return Me._FDesig
		End Get
		Set
			If (String.Equals(Me._FDesig, value) = false) Then
				Me.OnFDesigChanging(value)
				Me.SendPropertyChanging
				Me._FDesig = value
				Me.SendPropertyChanged("FDesig")
				Me.OnFDesigChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MPay", DbType:="Money")>  _
	Public Property MPay() As System.Nullable(Of Decimal)
		Get
			Return Me._MPay
		End Get
		Set
			If (Me._MPay.Equals(value) = false) Then
				Me.OnMPayChanging(value)
				Me.SendPropertyChanging
				Me._MPay = value
				Me.SendPropertyChanged("MPay")
				Me.OnMPayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MDesig", DbType:="NVarChar(10)")>  _
	Public Property MDesig() As String
		Get
			Return Me._MDesig
		End Get
		Set
			If (String.Equals(Me._MDesig, value) = false) Then
				Me.OnMDesigChanging(value)
				Me.SendPropertyChanging
				Me._MDesig = value
				Me.SendPropertyChanged("MDesig")
				Me.OnMDesigChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Board1", DbType:="NVarChar(15)")>  _
	Public Property Board1() As String
		Get
			Return Me._Board1
		End Get
		Set
			If (String.Equals(Me._Board1, value) = false) Then
				Me.OnBoard1Changing(value)
				Me.SendPropertyChanging
				Me._Board1 = value
				Me.SendPropertyChanged("Board1")
				Me.OnBoard1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RollNo1", DbType:="NVarChar(MAX)")>  _
	Public Property RollNo1() As String
		Get
			Return Me._RollNo1
		End Get
		Set
			If (String.Equals(Me._RollNo1, value) = false) Then
				Me.OnRollNo1Changing(value)
				Me.SendPropertyChanging
				Me._RollNo1 = value
				Me.SendPropertyChanged("RollNo1")
				Me.OnRollNo1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year1", DbType:="NVarChar(10)")>  _
	Public Property Year1() As String
		Get
			Return Me._Year1
		End Get
		Set
			If (String.Equals(Me._Year1, value) = false) Then
				Me.OnYear1Changing(value)
				Me.SendPropertyChanging
				Me._Year1 = value
				Me.SendPropertyChanged("Year1")
				Me.OnYear1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BName1", DbType:="NVarChar(MAX)")>  _
	Public Property BName1() As String
		Get
			Return Me._BName1
		End Get
		Set
			If (String.Equals(Me._BName1, value) = false) Then
				Me.OnBName1Changing(value)
				Me.SendPropertyChanging
				Me._BName1 = value
				Me.SendPropertyChanged("BName1")
				Me.OnBName1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grade1", DbType:="NVarChar(10)")>  _
	Public Property Grade1() As String
		Get
			Return Me._Grade1
		End Get
		Set
			If (String.Equals(Me._Grade1, value) = false) Then
				Me.OnGrade1Changing(value)
				Me.SendPropertyChanging
				Me._Grade1 = value
				Me.SendPropertyChanged("Grade1")
				Me.OnGrade1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_per1", DbType:="NVarChar(10)")>  _
	Public Property per1() As String
		Get
			Return Me._per1
		End Get
		Set
			If (String.Equals(Me._per1, value) = false) Then
				Me.Onper1Changing(value)
				Me.SendPropertyChanging
				Me._per1 = value
				Me.SendPropertyChanged("per1")
				Me.Onper1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Board2", DbType:="NVarChar(15)")>  _
	Public Property Board2() As String
		Get
			Return Me._Board2
		End Get
		Set
			If (String.Equals(Me._Board2, value) = false) Then
				Me.OnBoard2Changing(value)
				Me.SendPropertyChanging
				Me._Board2 = value
				Me.SendPropertyChanged("Board2")
				Me.OnBoard2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RollNo2", DbType:="NVarChar(MAX)")>  _
	Public Property RollNo2() As String
		Get
			Return Me._RollNo2
		End Get
		Set
			If (String.Equals(Me._RollNo2, value) = false) Then
				Me.OnRollNo2Changing(value)
				Me.SendPropertyChanging
				Me._RollNo2 = value
				Me.SendPropertyChanged("RollNo2")
				Me.OnRollNo2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year2", DbType:="NVarChar(10)")>  _
	Public Property Year2() As String
		Get
			Return Me._Year2
		End Get
		Set
			If (String.Equals(Me._Year2, value) = false) Then
				Me.OnYear2Changing(value)
				Me.SendPropertyChanging
				Me._Year2 = value
				Me.SendPropertyChanged("Year2")
				Me.OnYear2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bname2", DbType:="NVarChar(MAX)")>  _
	Public Property Bname2() As String
		Get
			Return Me._Bname2
		End Get
		Set
			If (String.Equals(Me._Bname2, value) = false) Then
				Me.OnBname2Changing(value)
				Me.SendPropertyChanging
				Me._Bname2 = value
				Me.SendPropertyChanged("Bname2")
				Me.OnBname2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grade2", DbType:="NVarChar(10)")>  _
	Public Property Grade2() As String
		Get
			Return Me._Grade2
		End Get
		Set
			If (String.Equals(Me._Grade2, value) = false) Then
				Me.OnGrade2Changing(value)
				Me.SendPropertyChanging
				Me._Grade2 = value
				Me.SendPropertyChanged("Grade2")
				Me.OnGrade2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Per2", DbType:="NVarChar(10)")>  _
	Public Property Per2() As String
		Get
			Return Me._Per2
		End Get
		Set
			If (String.Equals(Me._Per2, value) = false) Then
				Me.OnPer2Changing(value)
				Me.SendPropertyChanging
				Me._Per2 = value
				Me.SendPropertyChanged("Per2")
				Me.OnPer2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sib1", DbType:="NVarChar(50)")>  _
	Public Property Sib1() As String
		Get
			Return Me._Sib1
		End Get
		Set
			If (String.Equals(Me._Sib1, value) = false) Then
				Me.OnSib1Changing(value)
				Me.SendPropertyChanging
				Me._Sib1 = value
				Me.SendPropertyChanged("Sib1")
				Me.OnSib1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class1", DbType:="NVarChar(10)")>  _
	Public Property Class1() As String
		Get
			Return Me._Class1
		End Get
		Set
			If (String.Equals(Me._Class1, value) = false) Then
				Me.OnClass1Changing(value)
				Me.SendPropertyChanging
				Me._Class1 = value
				Me.SendPropertyChanged("Class1")
				Me.OnClass1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sib2", DbType:="NVarChar(50)")>  _
	Public Property Sib2() As String
		Get
			Return Me._Sib2
		End Get
		Set
			If (String.Equals(Me._Sib2, value) = false) Then
				Me.OnSib2Changing(value)
				Me.SendPropertyChanging
				Me._Sib2 = value
				Me.SendPropertyChanged("Sib2")
				Me.OnSib2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class2", DbType:="NVarChar(10)")>  _
	Public Property Class2() As String
		Get
			Return Me._Class2
		End Get
		Set
			If (String.Equals(Me._Class2, value) = false) Then
				Me.OnClass2Changing(value)
				Me.SendPropertyChanging
				Me._Class2 = value
				Me.SendPropertyChanged("Class2")
				Me.OnClass2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sib3", DbType:="NVarChar(50)")>  _
	Public Property Sib3() As String
		Get
			Return Me._Sib3
		End Get
		Set
			If (String.Equals(Me._Sib3, value) = false) Then
				Me.OnSib3Changing(value)
				Me.SendPropertyChanging
				Me._Sib3 = value
				Me.SendPropertyChanged("Sib3")
				Me.OnSib3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class3", DbType:="NVarChar(10)")>  _
	Public Property Class3() As String
		Get
			Return Me._Class3
		End Get
		Set
			If (String.Equals(Me._Class3, value) = false) Then
				Me.OnClass3Changing(value)
				Me.SendPropertyChanging
				Me._Class3 = value
				Me.SendPropertyChanged("Class3")
				Me.OnClass3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sib4", DbType:="NVarChar(50)")>  _
	Public Property Sib4() As String
		Get
			Return Me._Sib4
		End Get
		Set
			If (String.Equals(Me._Sib4, value) = false) Then
				Me.OnSib4Changing(value)
				Me.SendPropertyChanging
				Me._Sib4 = value
				Me.SendPropertyChanged("Sib4")
				Me.OnSib4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class4", DbType:="NVarChar(10)")>  _
	Public Property Class4() As String
		Get
			Return Me._Class4
		End Get
		Set
			If (String.Equals(Me._Class4, value) = false) Then
				Me.OnClass4Changing(value)
				Me.SendPropertyChanging
				Me._Class4 = value
				Me.SendPropertyChanged("Class4")
				Me.OnClass4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentClass", DbType:="NVarChar(10)")>  _
	Public Property CurrentClass() As String
		Get
			Return Me._CurrentClass
		End Get
		Set
			If (String.Equals(Me._CurrentClass, value) = false) Then
				Me.OnCurrentClassChanging(value)
				Me.SendPropertyChanging
				Me._CurrentClass = value
				Me.SendPropertyChanged("CurrentClass")
				Me.OnCurrentClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(MAX)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[TC No]", Storage:="_TC_No", DbType:="NVarChar(50)")>  _
	Public Property TC_No() As String
		Get
			Return Me._TC_No
		End Get
		Set
			If (String.Equals(Me._TC_No, value) = false) Then
				Me.OnTC_NoChanging(value)
				Me.SendPropertyChanging
				Me._TC_No = value
				Me.SendPropertyChanged("TC_No")
				Me.OnTC_NoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[TC Reason]", Storage:="_TC_Reason", DbType:="NVarChar(50)")>  _
	Public Property TC_Reason() As String
		Get
			Return Me._TC_Reason
		End Get
		Set
			If (String.Equals(Me._TC_Reason, value) = false) Then
				Me.OnTC_ReasonChanging(value)
				Me.SendPropertyChanging
				Me._TC_Reason = value
				Me.SendPropertyChanged("TC_Reason")
				Me.OnTC_ReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_FeeData", Storage:="_FeeDatas", ThisKey:="SR_no", OtherKey:="SR_no")>  _
	Public Property FeeDatas() As EntitySet(Of FeeData)
		Get
			Return Me._FeeDatas
		End Get
		Set
			Me._FeeDatas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Transact", Storage:="_Transacts", ThisKey:="SR_no", OtherKey:="SR_no")>  _
	Public Property Transacts() As EntitySet(Of Transact)
		Get
			Return Me._Transacts
		End Get
		Set
			Me._Transacts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Session_Student", Storage:="_Session1", ThisKey:="Session", OtherKey:="Session", IsForeignKey:=true)>  _
	Public Property Session1() As Session
		Get
			Return Me._Session1.Entity
		End Get
		Set
			Dim previousValue As Session = Me._Session1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Session1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Session1.Entity = Nothing
					previousValue.Students.Remove(Me)
				End If
				Me._Session1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Students.Add(Me)
					Me._Session = value.Session
				Else
					Me._Session = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Session1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FeeDatas(ByVal entity As FeeData)
		Me.SendPropertyChanging
		entity.Student = Me
	End Sub
	
	Private Sub detach_FeeDatas(ByVal entity As FeeData)
		Me.SendPropertyChanging
		entity.Student = Nothing
	End Sub
	
	Private Sub attach_Transacts(ByVal entity As Transact)
		Me.SendPropertyChanging
		entity.Student = Me
	End Sub
	
	Private Sub detach_Transacts(ByVal entity As Transact)
		Me.SendPropertyChanging
		entity.Student = Nothing
	End Sub
End Class
